* TestRunner:
  - ProtectionDomain:
    > OnTheFlyCompiler should be a SecureClassLoader
    		not a regular classloader
    > somehow create a CodeSource for everything that is compiled
    		by OnTheFlyCompiler (since we want to restrict everything)
    	> create a new ProtectionDomain with the compiler
    	> each student class is compiled/loaded by a separate classloader
    		so should be totally isolated
  - What if I allow student code to call stop()?  
  	> Make sure that it can't access any other threads (should be easy)
  	> otherwise the container instance needs to be
  		called by whoever calls stop
  
  - currently student code cannot disable its security manager
  - timeouts from calling stop() screw up JUnit
  - not sure where the ThreadDeath exception is actually going 
  - should the actual JUnit test case spawn the thread?
  - would require making KillableTaskManager considerably less general
  - KTM could have the JUnit class and the Request
  - launch the thread in the generated JUnit code maybe?
  - Put student code into totally separate class from JUnit tests
  	> unsure if this will help with the current problem?  
* SecurityManager: disallow access to files/sockets/etc
	for everything in whatever package I put student code into
* Nice way to configure:
  - time to wait for timeouts
  - name of package to put student code
  - ?
* ResultsWidget:
  - link to a panel for stdout/stderr results
    > truncate to a certain number of lines
    > maybe have a scrollable "more" option
  - link to the exception for a failure 
* Scrollable main panel
* problem creation workflow
* Jython support
  - compile Jython in-memory?
  - for Jython, the "StudentCode" class should encapsulate
  	the Jython code using whatever layer lets it look like
  	a regular Java class.  This keeps the interface the same.
 
	